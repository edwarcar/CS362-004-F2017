        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:#define MAX_TESTS 500 
        -:   10:
        -:   11:
function main called 1 returned 100% blocks executed 90%
        1:   12:int main() {
        -:   13:    
        -:   14:    //declare variables
        -:   15:    struct gameState game;
        -:   16:    int players; 
        -:   17:    int player; 
        1:   18:    int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   19:    int seed;  
        -:   20:    int coinBonus;
        -:   21:    int handPos;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0; 
        1:   24:    int choice3 = 0; 
        1:   25:    int test_failed = 0; 	
        1:   26:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   27:    int test_status = 1; 	
        -:   28:
        1:   29:printf("/*********************** Randomly Testing Smithy Card **************************/\n");
call    0 returned 100%
        -:   30:
      501:   31:    for (int i = 0; i < MAX_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   32:
        -:   33:	//randomly initialize variables
      500:   34:        players = rand() % (MAX_PLAYERS - 2) + 2;
call    0 returned 100%
      500:   35:        seed = rand();
call    0 returned 100%
      500:   36:        coinBonus = 0;
      500:   37:        handPos = rand() % 4;
call    0 returned 100%
      500:   38:        player = i % (players);
        -:   39:
      500:   40:        initializeGame(players, k, seed, &game); //initialize game
call    0 returned 100%
        -:   41:
        -:   42:        // Initiate valid state variables
      500:   43:        game.deckCount[player] = rand() % MAX_DECK;   //Pick random deck size out of MAX DECK size
call    0 returned 100%
      500:   44:        game.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
      500:   45:        game.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        -:   46:      
      500:   47:	int discardCount1 = game.discardCount[player]; 
      500:   48:	int deckCount1 = game.deckCount[player];
        -:   49:	 
        -:   50:	//grab hand count numbers before calling the card
      500:   51:	int handCount1 = numHandCards(&game);
call    0 returned 100%
        -:   52: 
        -:   53:	//check if cardEffect is working properly
      500:   54:        if(cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   55:
        -:   56:	//grab hand count after calling card
      500:   57:	int handCount2 = numHandCards(&game); 
call    0 returned 100%
      500:   58:	int discardCount2 = game.discardCount[player];
      500:   59:        int deckCount2 = game.deckCount[player];
        -:   60:
        -:   61:		//check to see if hand count changed properly
      500:   62:		if(handCount2 != (handCount1 + 3 - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   63:			printf("Error: Incorrect number of cards drawn\n"); 	
call    0 returned 100%
      500:   64:			printf("Hand count before: %d. Hand count after %d.\n", handCount1, handCount2 ); 
call    0 returned 100%
      500:   65:			test_failed++; 
      500:   66:			test_status= 0; //set test state to failed
        -:   67:		}
      500:   68:		 if(deckCount2 != deckCount1 + 2) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   69:                {
        -:   70:
      500:   71:                        printf("Error: Incorrect number of cards in deck\n");
call    0 returned 100%
      500:   72:                        printf("Deck count before: %d. Deck count after %d.\n", deckCount1, deckCount2 );
call    0 returned 100%
      500:   73:                        test_failed++;
      500:   74:                        test_status= 0; //set test state to failed
        -:   75:
        -:   76:                }
      500:   77:                if(discardCount2 != discardCount1 + 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   78:                        printf("Error: Incorrect number of cards discarded\n");
call    0 returned 100%
      500:   79:                        printf("Hand count before: %d. Hand count after %d.\n", discardCount1, discardCount2 );
call    0 returned 100%
      500:   80:                        test_failed++;
      500:   81: 	                       test_status= 0; //set test state to failed		
        -:   82:		}
        -:   83:	}
        -:   84:	// if card effect failed, print error
        -:   85:	else {
    #####:   86:		printf("Error: card could not be properly played\n"); 
call    0 never executed
    #####:   87:		test_status = 0; //set test state to failed
    #####:   88:		test_failed++; 
        -:   89:	}
        -:   90:
      500:   91:	if(test_status == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   92:                printf("Iteration %d: test failed\n", i);
call    0 returned 100%
        -:   93:        }
        -:   94:        else {
    #####:   95:                printf("Iteration %d: test passed \n", i);
call    0 never executed
        -:   96:        }
        -:   97:	
        -:   98:
        -:   99:
        -:  100:    }	
        1:  101:    if(test_failed > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  102:	printf("Smithy card failed %d random tests\n", test_failed);	
call    0 returned 100%
        -:  103:    }		
        -:  104:    else {
    #####:  105:	printf("Smithy card passed all random tests\n"); 
call    0 never executed
        -:  106:    }	
        -:  107:
        1:  108:    return 0;
        -:  109:}
