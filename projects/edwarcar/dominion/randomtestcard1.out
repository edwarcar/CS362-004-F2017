/*********************** Randomly Testing Smithy Card **************************/
Error: Incorrect number of cards drawn
Hand count before: 109. Hand count after 114.
Iteration 0: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 1: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 2: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 3: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 4: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 5: test failed
Error: Incorrect number of cards drawn
Hand count before: 37. Hand count after 42.
Iteration 6: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 7: test failed
Error: Incorrect number of cards drawn
Hand count before: 139. Hand count after 144.
Iteration 8: test failed
Error: Incorrect number of cards drawn
Hand count before: 141. Hand count after 146.
Iteration 9: test failed
Error: Incorrect number of cards drawn
Hand count before: 336. Hand count after 341.
Iteration 10: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 11: test failed
Error: Incorrect number of cards drawn
Hand count before: 246. Hand count after 251.
Iteration 12: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 13: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 14: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 15: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 16: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 17: test failed
Error: Incorrect number of cards drawn
Hand count before: 74. Hand count after 79.
Iteration 18: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 19: test failed
Error: Incorrect number of cards drawn
Hand count before: 459. Hand count after 464.
Iteration 20: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 21: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 22: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 23: test failed
Error: Incorrect number of cards drawn
Hand count before: 444. Hand count after 449.
Iteration 24: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 25: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 26: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 27: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 28: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 29: test failed
Error: Incorrect number of cards drawn
Hand count before: 149. Hand count after 154.
Iteration 30: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 31: test failed
Error: Incorrect number of cards drawn
Hand count before: 8. Hand count after 13.
Iteration 32: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 33: test failed
Error: Incorrect number of cards drawn
Hand count before: 337. Hand count after 342.
Iteration 34: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 35: test failed
Error: Incorrect number of cards drawn
Hand count before: 110. Hand count after 115.
Iteration 36: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 37: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 38: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 39: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 40: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 41: test failed
Error: Incorrect number of cards drawn
Hand count before: 397. Hand count after 402.
Iteration 42: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 43: test failed
Error: Incorrect number of cards drawn
Hand count before: 110. Hand count after 115.
Iteration 44: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 45: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 46: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 47: test failed
Error: Incorrect number of cards drawn
Hand count before: 129. Hand count after 134.
Iteration 48: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 49: test failed
Error: Incorrect number of cards drawn
Hand count before: 372. Hand count after 377.
Iteration 50: test failed
Error: Incorrect number of cards drawn
Hand count before: 146. Hand count after 151.
Iteration 51: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 52: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 53: test failed
Error: Incorrect number of cards drawn
Hand count before: 241. Hand count after 246.
Iteration 54: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 55: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 56: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 57: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 58: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 59: test failed
Error: Incorrect number of cards drawn
Hand count before: 422. Hand count after 427.
Iteration 60: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 61: test failed
Error: Incorrect number of cards drawn
Hand count before: 365. Hand count after 370.
Iteration 62: test failed
Error: Incorrect number of cards drawn
Hand count before: 382. Hand count after 387.
Iteration 63: test failed
Error: Incorrect number of cards drawn
Hand count before: 384. Hand count after 389.
Iteration 64: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 65: test failed
Error: Incorrect number of cards drawn
Hand count before: 123. Hand count after 128.
Iteration 66: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 67: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 68: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 69: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 70: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 71: test failed
Error: Incorrect number of cards drawn
Hand count before: 378. Hand count after 383.
Iteration 72: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 73: test failed
Error: Incorrect number of cards drawn
Hand count before: 424. Hand count after 429.
Iteration 74: test failed
Error: Incorrect number of cards drawn
Hand count before: 131. Hand count after 136.
Iteration 75: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 76: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 77: test failed
Error: Incorrect number of cards drawn
Hand count before: 199. Hand count after 204.
Iteration 78: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 79: test failed
Error: Incorrect number of cards drawn
Hand count before: 298. Hand count after 303.
Iteration 80: test failed
Error: Incorrect number of cards drawn
Hand count before: 122. Hand count after 127.
Iteration 81: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 82: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 83: test failed
Error: Incorrect number of cards drawn
Hand count before: 348. Hand count after 353.
Iteration 84: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 85: test failed
Error: Incorrect number of cards drawn
Hand count before: 10. Hand count after 15.
Iteration 86: test failed
Error: Incorrect number of cards drawn
Hand count before: 321. Hand count after 326.
Iteration 87: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 88: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 89: test failed
Error: Incorrect number of cards drawn
Hand count before: 183. Hand count after 188.
Iteration 90: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 91: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 92: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 93: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 94: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 95: test failed
Error: Incorrect number of cards drawn
Hand count before: 183. Hand count after 188.
Iteration 96: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 97: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 98: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 99: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 100: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 101: test failed
Error: Incorrect number of cards drawn
Hand count before: 487. Hand count after 492.
Iteration 102: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 103: test failed
Error: Incorrect number of cards drawn
Hand count before: 354. Hand count after 359.
Iteration 104: test failed
Error: Incorrect number of cards drawn
Hand count before: 63. Hand count after 68.
Iteration 105: test failed
Error: Incorrect number of cards drawn
Hand count before: 213. Hand count after 218.
Iteration 106: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 107: test failed
Error: Incorrect number of cards drawn
Hand count before: 44. Hand count after 49.
Iteration 108: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 109: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 110: test failed
Error: Incorrect number of cards drawn
Hand count before: 165. Hand count after 170.
Iteration 111: test failed
Error: Incorrect number of cards drawn
Hand count before: 121. Hand count after 126.
Iteration 112: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 113: test failed
Error: Incorrect number of cards drawn
Hand count before: 296. Hand count after 301.
Iteration 114: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 115: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 116: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 117: test failed
Error: Incorrect number of cards drawn
Hand count before: 484. Hand count after 489.
Iteration 118: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 119: test failed
Error: Incorrect number of cards drawn
Hand count before: 261. Hand count after 266.
Iteration 120: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 121: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 122: test failed
Error: Incorrect number of cards drawn
Hand count before: 488. Hand count after 493.
Iteration 123: test failed
Error: Incorrect number of cards drawn
Hand count before: 479. Hand count after 484.
Iteration 124: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 125: test failed
Error: Incorrect number of cards drawn
Hand count before: 124. Hand count after 129.
Iteration 126: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 127: test failed
Error: Incorrect number of cards drawn
Hand count before: 370. Hand count after 375.
Iteration 128: test failed
Error: Incorrect number of cards drawn
Hand count before: 316. Hand count after 321.
Iteration 129: test failed
Error: Incorrect number of cards drawn
Hand count before: 375. Hand count after 380.
Iteration 130: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 131: test failed
Error: Incorrect number of cards drawn
Hand count before: 140. Hand count after 145.
Iteration 132: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 133: test failed
Error: Incorrect number of cards drawn
Hand count before: 143. Hand count after 148.
Iteration 134: test failed
Error: Incorrect number of cards drawn
Hand count before: 216. Hand count after 221.
Iteration 135: test failed
Error: Incorrect number of cards drawn
Hand count before: 48. Hand count after 53.
Iteration 136: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 137: test failed
Error: Incorrect number of cards drawn
Hand count before: 399. Hand count after 404.
Iteration 138: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 139: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 140: test failed
Error: Incorrect number of cards drawn
Hand count before: 241. Hand count after 246.
Iteration 141: test failed
Error: Incorrect number of cards drawn
Hand count before: 7. Hand count after 12.
Iteration 142: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 143: test failed
Error: Incorrect number of cards drawn
Hand count before: 272. Hand count after 277.
Iteration 144: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 145: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 146: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 147: test failed
Error: Incorrect number of cards drawn
Hand count before: 144. Hand count after 149.
Iteration 148: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 149: test failed
Error: Incorrect number of cards drawn
Hand count before: 415. Hand count after 420.
Iteration 150: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 151: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 152: test failed
Error: Incorrect number of cards drawn
Hand count before: 488. Hand count after 493.
Iteration 153: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 154: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 155: test failed
Error: Incorrect number of cards drawn
Hand count before: 237. Hand count after 242.
Iteration 156: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 157: test failed
Error: Incorrect number of cards drawn
Hand count before: 390. Hand count after 395.
Iteration 158: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 159: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 160: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 161: test failed
Error: Incorrect number of cards drawn
Hand count before: 206. Hand count after 211.
Iteration 162: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 163: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 164: test failed
Error: Incorrect number of cards drawn
Hand count before: 275. Hand count after 280.
Iteration 165: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 166: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 167: test failed
Error: Incorrect number of cards drawn
Hand count before: 248. Hand count after 253.
Iteration 168: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 169: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 170: test failed
Error: Incorrect number of cards drawn
Hand count before: 75. Hand count after 80.
Iteration 171: test failed
Error: Incorrect number of cards drawn
Hand count before: 438. Hand count after 443.
Iteration 172: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 173: test failed
Error: Incorrect number of cards drawn
Hand count before: 428. Hand count after 433.
Iteration 174: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 175: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 176: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 177: test failed
Error: Incorrect number of cards drawn
Hand count before: 192. Hand count after 197.
Iteration 178: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 179: test failed
Error: Incorrect number of cards drawn
Hand count before: 113. Hand count after 118.
Iteration 180: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 181: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 182: test failed
Error: Incorrect number of cards drawn
Hand count before: 307. Hand count after 312.
Iteration 183: test failed
Error: Incorrect number of cards drawn
Hand count before: 134. Hand count after 139.
Iteration 184: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 185: test failed
Error: Incorrect number of cards drawn
Hand count before: 296. Hand count after 301.
Iteration 186: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 187: test failed
Error: Incorrect number of cards drawn
Hand count before: 465. Hand count after 470.
Iteration 188: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 189: test failed
Error: Incorrect number of cards drawn
Hand count before: 138. Hand count after 143.
Iteration 190: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 191: test failed
Error: Incorrect number of cards drawn
Hand count before: 250. Hand count after 255.
Iteration 192: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 193: test failed
Error: Incorrect number of cards drawn
Hand count before: 182. Hand count after 187.
Iteration 194: test failed
Error: Incorrect number of cards drawn
Hand count before: 129. Hand count after 134.
Iteration 195: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 196: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 197: test failed
Error: Incorrect number of cards drawn
Hand count before: 280. Hand count after 285.
Iteration 198: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 199: test failed
Error: Incorrect number of cards drawn
Hand count before: 480. Hand count after 485.
Iteration 200: test failed
Error: Incorrect number of cards drawn
Hand count before: 428. Hand count after 433.
Iteration 201: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 202: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 203: test failed
Error: Incorrect number of cards drawn
Hand count before: 397. Hand count after 402.
Iteration 204: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 205: test failed
Error: Incorrect number of cards drawn
Hand count before: 83. Hand count after 88.
Iteration 206: test failed
Error: Incorrect number of cards drawn
Hand count before: 107. Hand count after 112.
Iteration 207: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 208: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 209: test failed
Error: Incorrect number of cards drawn
Hand count before: 204. Hand count after 209.
Iteration 210: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 211: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 212: test failed
Error: Incorrect number of cards drawn
Hand count before: 338. Hand count after 343.
Iteration 213: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 214: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 215: test failed
Error: Incorrect number of cards drawn
Hand count before: 27. Hand count after 32.
Iteration 216: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 217: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 218: test failed
Error: Incorrect number of cards drawn
Hand count before: 80. Hand count after 85.
Iteration 219: test failed
Error: Incorrect number of cards drawn
Hand count before: 311. Hand count after 316.
Iteration 220: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 221: test failed
Error: Incorrect number of cards drawn
Hand count before: 46. Hand count after 51.
Iteration 222: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 223: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 224: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 225: test failed
Error: Incorrect number of cards drawn
Hand count before: 475. Hand count after 480.
Iteration 226: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 227: test failed
Error: Incorrect number of cards drawn
Hand count before: 276. Hand count after 281.
Iteration 228: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 229: test failed
Error: Incorrect number of cards drawn
Hand count before: 472. Hand count after 477.
Iteration 230: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 231: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 232: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 233: test failed
Error: Incorrect number of cards drawn
Hand count before: 186. Hand count after 191.
Iteration 234: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 235: test failed
Error: Incorrect number of cards drawn
Hand count before: 68. Hand count after 73.
Iteration 236: test failed
Error: Incorrect number of cards drawn
Hand count before: 186. Hand count after 191.
Iteration 237: test failed
Error: Incorrect number of cards drawn
Hand count before: 413. Hand count after 418.
Iteration 238: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 239: test failed
Error: Incorrect number of cards drawn
Hand count before: 305. Hand count after 310.
Iteration 240: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 241: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 242: test failed
Error: Incorrect number of cards drawn
Hand count before: 166. Hand count after 171.
Iteration 243: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 244: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 245: test failed
Error: Incorrect number of cards drawn
Hand count before: 383. Hand count after 388.
Iteration 246: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 247: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 248: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 249: test failed
Error: Incorrect number of cards drawn
Hand count before: 312. Hand count after 317.
Iteration 250: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 251: test failed
Error: Incorrect number of cards drawn
Hand count before: 46. Hand count after 51.
Iteration 252: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 253: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 254: test failed
Error: Incorrect number of cards drawn
Hand count before: 134. Hand count after 139.
Iteration 255: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 256: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 257: test failed
Error: Incorrect number of cards drawn
Hand count before: 6. Hand count after 11.
Iteration 258: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 259: test failed
Error: Incorrect number of cards drawn
Hand count before: 48. Hand count after 53.
Iteration 260: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 261: test failed
Error: Incorrect number of cards drawn
Hand count before: 352. Hand count after 357.
Iteration 262: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 263: test failed
Error: Incorrect number of cards drawn
Hand count before: 308. Hand count after 313.
Iteration 264: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 265: test failed
Error: Incorrect number of cards drawn
Hand count before: 374. Hand count after 379.
Iteration 266: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 267: test failed
Error: Incorrect number of cards drawn
Hand count before: 134. Hand count after 139.
Iteration 268: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 269: test failed
Error: Incorrect number of cards drawn
Hand count before: 440. Hand count after 445.
Iteration 270: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 271: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 272: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 273: test failed
Error: Incorrect number of cards drawn
Hand count before: 338. Hand count after 343.
Iteration 274: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 275: test failed
Error: Incorrect number of cards drawn
Hand count before: 172. Hand count after 177.
Iteration 276: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 277: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 278: test failed
Error: Incorrect number of cards drawn
Hand count before: 435. Hand count after 440.
Iteration 279: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 280: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 281: test failed
Error: Incorrect number of cards drawn
Hand count before: 176. Hand count after 181.
Iteration 282: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 283: test failed
Error: Incorrect number of cards drawn
Hand count before: 448. Hand count after 453.
Iteration 284: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 285: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 286: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 287: test failed
Error: Incorrect number of cards drawn
Hand count before: 18. Hand count after 23.
Iteration 288: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 289: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 290: test failed
Error: Incorrect number of cards drawn
Hand count before: 206. Hand count after 211.
Iteration 291: test failed
Error: Incorrect number of cards drawn
Hand count before: 377. Hand count after 382.
Iteration 292: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 293: test failed
Error: Incorrect number of cards drawn
Hand count before: 238. Hand count after 243.
Iteration 294: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 295: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 296: test failed
Error: Incorrect number of cards drawn
Hand count before: 145. Hand count after 150.
Iteration 297: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 298: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 299: test failed
Error: Incorrect number of cards drawn
Hand count before: 176. Hand count after 181.
Iteration 300: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 301: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 302: test failed
Error: Incorrect number of cards drawn
Hand count before: 116. Hand count after 121.
Iteration 303: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 304: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 305: test failed
Error: Incorrect number of cards drawn
Hand count before: 450. Hand count after 455.
Iteration 306: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 307: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 308: test failed
Error: Incorrect number of cards drawn
Hand count before: 436. Hand count after 441.
Iteration 309: test failed
Error: Incorrect number of cards drawn
Hand count before: 137. Hand count after 142.
Iteration 310: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 311: test failed
Error: Incorrect number of cards drawn
Hand count before: 69. Hand count after 74.
Iteration 312: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 313: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 314: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 315: test failed
Error: Incorrect number of cards drawn
Hand count before: 239. Hand count after 244.
Iteration 316: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 317: test failed
Error: Incorrect number of cards drawn
Hand count before: 349. Hand count after 354.
Iteration 318: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 319: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 320: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 321: test failed
Error: Incorrect number of cards drawn
Hand count before: 160. Hand count after 165.
Iteration 322: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 323: test failed
Error: Incorrect number of cards drawn
Hand count before: 410. Hand count after 415.
Iteration 324: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 325: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 326: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 327: test failed
Error: Incorrect number of cards drawn
Hand count before: 241. Hand count after 246.
Iteration 328: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 329: test failed
Error: Incorrect number of cards drawn
Hand count before: 276. Hand count after 281.
Iteration 330: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 331: test failed
Error: Incorrect number of cards drawn
Hand count before: 490. Hand count after 495.
Iteration 332: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 333: test failed
Error: Incorrect number of cards drawn
Hand count before: 378. Hand count after 383.
Iteration 334: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 335: test failed
Error: Incorrect number of cards drawn
Hand count before: 74. Hand count after 79.
Iteration 336: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 337: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 338: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 339: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 340: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 341: test failed
Error: Incorrect number of cards drawn
Hand count before: 26. Hand count after 31.
Iteration 342: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 343: test failed
Error: Incorrect number of cards drawn
Hand count before: 434. Hand count after 439.
Iteration 344: test failed
Error: Incorrect number of cards drawn
Hand count before: 291. Hand count after 296.
Iteration 345: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 346: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 347: test failed
Error: Incorrect number of cards drawn
Hand count before: 87. Hand count after 92.
Iteration 348: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 349: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 350: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 351: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 352: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 353: test failed
Error: Incorrect number of cards drawn
Hand count before: 181. Hand count after 186.
Iteration 354: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 355: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 356: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 357: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 358: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 359: test failed
Error: Incorrect number of cards drawn
Hand count before: 211. Hand count after 216.
Iteration 360: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 361: test failed
Error: Incorrect number of cards drawn
Hand count before: 372. Hand count after 377.
Iteration 362: test failed
Error: Incorrect number of cards drawn
Hand count before: 271. Hand count after 276.
Iteration 363: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 364: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 365: test failed
Error: Incorrect number of cards drawn
Hand count before: 8. Hand count after 13.
Iteration 366: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 367: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 368: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 369: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 370: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 371: test failed
Error: Incorrect number of cards drawn
Hand count before: 311. Hand count after 316.
Iteration 372: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 373: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 374: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 375: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 376: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 377: test failed
Error: Incorrect number of cards drawn
Hand count before: 291. Hand count after 296.
Iteration 378: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 379: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 380: test failed
Error: Incorrect number of cards drawn
Hand count before: 98. Hand count after 103.
Iteration 381: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 382: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 383: test failed
Error: Incorrect number of cards drawn
Hand count before: 159. Hand count after 164.
Iteration 384: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 385: test failed
Error: Incorrect number of cards drawn
Hand count before: 131. Hand count after 136.
Iteration 386: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 387: test failed
Error: Incorrect number of cards drawn
Hand count before: 327. Hand count after 332.
Iteration 388: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 389: test failed
Error: Incorrect number of cards drawn
Hand count before: 461. Hand count after 466.
Iteration 390: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 391: test failed
Error: Incorrect number of cards drawn
Hand count before: 330. Hand count after 335.
Iteration 392: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 393: test failed
Error: Incorrect number of cards drawn
Hand count before: 475. Hand count after 480.
Iteration 394: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 395: test failed
Error: Incorrect number of cards drawn
Hand count before: 228. Hand count after 233.
Iteration 396: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 397: test failed
Error: Incorrect number of cards drawn
Hand count before: 327. Hand count after 332.
Iteration 398: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 399: test failed
Error: Incorrect number of cards drawn
Hand count before: 295. Hand count after 300.
Iteration 400: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 401: test failed
Error: Incorrect number of cards drawn
Hand count before: 98. Hand count after 103.
Iteration 402: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 403: test failed
Error: Incorrect number of cards drawn
Hand count before: 132. Hand count after 137.
Iteration 404: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 405: test failed
Error: Incorrect number of cards drawn
Hand count before: 422. Hand count after 427.
Iteration 406: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 407: test failed
Error: Incorrect number of cards drawn
Hand count before: 345. Hand count after 350.
Iteration 408: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 409: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 410: test failed
Error: Incorrect number of cards drawn
Hand count before: 365. Hand count after 370.
Iteration 411: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 412: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 413: test failed
Error: Incorrect number of cards drawn
Hand count before: 497. Hand count after 502.
Iteration 414: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 415: test failed
Error: Incorrect number of cards drawn
Hand count before: 104. Hand count after 109.
Iteration 416: test failed
Error: Incorrect number of cards drawn
Hand count before: 227. Hand count after 232.
Iteration 417: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 418: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 419: test failed
Error: Incorrect number of cards drawn
Hand count before: 123. Hand count after 128.
Iteration 420: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 421: test failed
Error: Incorrect number of cards drawn
Hand count before: 231. Hand count after 236.
Iteration 422: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 423: test failed
Error: Incorrect number of cards drawn
Hand count before: 84. Hand count after 89.
Iteration 424: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 425: test failed
Error: Incorrect number of cards drawn
Hand count before: 134. Hand count after 139.
Iteration 426: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 427: test failed
Error: Incorrect number of cards drawn
Hand count before: 354. Hand count after 359.
Iteration 428: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 429: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 430: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 431: test failed
Error: Incorrect number of cards drawn
Hand count before: 129. Hand count after 134.
Iteration 432: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 433: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 434: test failed
Error: Incorrect number of cards drawn
Hand count before: 294. Hand count after 299.
Iteration 435: test failed
Error: Incorrect number of cards drawn
Hand count before: 180. Hand count after 185.
Iteration 436: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 437: test failed
Error: Incorrect number of cards drawn
Hand count before: 173. Hand count after 178.
Iteration 438: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 439: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 440: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 441: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 442: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 443: test failed
Error: Incorrect number of cards drawn
Hand count before: 306. Hand count after 311.
Iteration 444: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 445: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 446: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 447: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 448: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 449: test failed
Error: Incorrect number of cards drawn
Hand count before: 320. Hand count after 325.
Iteration 450: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 451: test failed
Error: Incorrect number of cards drawn
Hand count before: 158. Hand count after 163.
Iteration 452: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 453: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 454: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 455: test failed
Error: Incorrect number of cards drawn
Hand count before: 298. Hand count after 303.
Iteration 456: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 457: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 458: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 459: test failed
Error: Incorrect number of cards drawn
Hand count before: 307. Hand count after 312.
Iteration 460: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 461: test failed
Error: Incorrect number of cards drawn
Hand count before: 78. Hand count after 83.
Iteration 462: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 463: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 464: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 465: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 466: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 467: test failed
Error: Incorrect number of cards drawn
Hand count before: 181. Hand count after 186.
Iteration 468: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 469: test failed
Error: Incorrect number of cards drawn
Hand count before: 417. Hand count after 422.
Iteration 470: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 471: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 472: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 473: test failed
Error: Incorrect number of cards drawn
Hand count before: 362. Hand count after 367.
Iteration 474: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 475: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 476: test failed
Error: Incorrect number of cards drawn
Hand count before: 143. Hand count after 148.
Iteration 477: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 478: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 479: test failed
Error: Incorrect number of cards drawn
Hand count before: 461. Hand count after 466.
Iteration 480: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 481: test failed
Error: Incorrect number of cards drawn
Hand count before: 23. Hand count after 28.
Iteration 482: test failed
Error: Incorrect number of cards drawn
Hand count before: 272. Hand count after 277.
Iteration 483: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 484: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 485: test failed
Error: Incorrect number of cards drawn
Hand count before: 219. Hand count after 224.
Iteration 486: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 487: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 488: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 489: test failed
Error: Incorrect number of cards drawn
Hand count before: 369. Hand count after 374.
Iteration 490: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 491: test failed
Error: Incorrect number of cards drawn
Hand count before: 161. Hand count after 166.
Iteration 492: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 493: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 494: test failed
Error: Incorrect number of cards drawn
Hand count before: 73. Hand count after 78.
Iteration 495: test failed
Error: Incorrect number of cards drawn
Hand count before: 52. Hand count after 57.
Iteration 496: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 497: test failed
Error: Incorrect number of cards drawn
Hand count before: 267. Hand count after 272.
Iteration 498: test failed
Error: Incorrect number of cards drawn
Hand count before: 5. Hand count after 10.
Iteration 499: test failed
Smithy card failed 500 random tests
File 'randomtestcard1.c'
Lines executed:86.49% of 37
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:85.00% of 20
Creating 'randomtestcard1.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:#define MAX_TESTS 500 
        -:   10:
        -:   11:
function main called 1 returned 100% blocks executed 88%
        1:   12:int main() {
        -:   13:    
        -:   14:    //declare variables
        -:   15:    struct gameState game;
        -:   16:    int players; 
        -:   17:    int player; 
        1:   18:    int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   19:    int seed;  
        -:   20:    int coinBonus;
        -:   21:    int handPos;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0; 
        1:   24:    int choice3 = 0; 
        1:   25:    int test_failed = 0; 	
        1:   26:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   27:    int test_status = 1; 	
        -:   28:
        1:   29:printf("/*********************** Randomly Testing Smithy Card **************************/\n");
call    0 returned 100%
        -:   30:
      501:   31:    for (int i = 0; i < MAX_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   32:
        -:   33:	//randomly initialize variables
      500:   34:        players = rand() % (MAX_PLAYERS - 2) + 2;
call    0 returned 100%
      500:   35:        seed = rand();
call    0 returned 100%
      500:   36:        coinBonus = 0;
      500:   37:        handPos = rand() % 4;
call    0 returned 100%
      500:   38:        player = i % (players);
        -:   39:
      500:   40:        initializeGame(players, k, seed, &game); //initialize game
call    0 returned 100%
        -:   41:
        -:   42:        // Initiate valid state variables
      500:   43:        game.deckCount[player] = rand() % MAX_DECK;   //Pick random deck size out of MAX DECK size
call    0 returned 100%
      500:   44:        game.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
      500:   45:        game.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        -:   46:       
        -:   47:	//grab hand count numbers before calling the card
      500:   48:	int handCount1 = numHandCards(&game);
call    0 returned 100%
        -:   49: 
        -:   50:	//check if cardEffect is working properly
      500:   51:        if(cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   52:
        -:   53:	//grab hand count after calling card
      500:   54:	int handCount2 = numHandCards(&game); 
call    0 returned 100%
        -:   55:
        -:   56:		//check to see if hand count changed properly
      500:   57:		if(handCount2 != (handCount1 + 3 - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   58:			printf("Error: Incorrect number of cards drawn\n"); 	
call    0 returned 100%
      500:   59:			printf("Hand count before: %d. Hand count after %d.\n", handCount1, handCount2 ); 
call    0 returned 100%
      500:   60:			test_failed++; 
      500:   61:			test_status= 0; //set test state to failed
        -:   62:		}
        -:   63:		
        -:   64:	}
        -:   65:	// if card effect failed, print error
        -:   66:	else {
    #####:   67:		printf("Error: card could not be properly played\n"); 
call    0 never executed
    #####:   68:		test_status = 0; //set test state to failed
    #####:   69:		test_failed++; 
        -:   70:	}
        -:   71:
      500:   72:	if(test_status == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:   73:                printf("Iteration %d: test failed\n", i);
call    0 returned 100%
        -:   74:        }
        -:   75:        else {
    #####:   76:                printf("Iteration %d: test passed \n", i);
call    0 never executed
        -:   77:        }
        -:   78:	
        -:   79:
        -:   80:
        -:   81:    }	
        1:   82:    if(test_failed > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   83:	printf("Smithy card failed %d random tests\n", test_failed);	
call    0 returned 100%
        -:   84:    }		
        -:   85:    else {
    #####:   86:	printf("Smithy card passed all random tests\n"); 
call    0 never executed
        -:   87:    }	
        -:   88:
        1:   89:    return 0;
        -:   90:}
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:4.67% of 214
Branches executed:12.57% of 183
Taken at least once:1.09% of 183
Calls executed:3.33% of 60

Function 'EmbargoCard'
Lines executed:0.00% of 8
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 1

Function 'GreatHallCard'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'VillageCard'
Lines executed:0.00% of 7
No branches
Calls executed:0.00% of 4

Function 'AdventurerCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 2

Function 'SmithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 1

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:93.55% of 62
Branches executed:100.00% of 46
Taken at least once:86.96% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:20.00% of 565
Branches executed:22.30% of 417
Taken at least once:14.63% of 417
Calls executed:11.46% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 18825 returned 100% blocks executed 83%
    18825:   10:int compare(const void* a, const void* b) {
    18825:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
    18825:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     5020:   14:    return -1;
    13805:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 500 returned 100% blocks executed 94%
      500:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
      500:   46:  SelectStream(1);
call    0 returned 100%
      500:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
      500:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
      500:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
     5500:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
    55000:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
    50000:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
      500:   75:  if (numPlayers == 2)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   76:    {
      245:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
      255:   79:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:    {
      255:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
      500:   89:  if (numPlayers == 2)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   90:    {
      245:   91:      state->supplyCount[estate] = 8;
      245:   92:      state->supplyCount[duchy] = 8;
      245:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
      255:   97:      state->supplyCount[estate] = 12;
      255:   98:      state->supplyCount[duchy] = 12;
      255:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
      500:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      500:  104:  state->supplyCount[silver] = 40;
      500:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    10500:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
   105000:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  111:	{
    97000:  112:	  if (kingdomCards[j] == i)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
     2000:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  116:		{
     1000:  117:		  if (numPlayers == 2){ 
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
      245:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
      255:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
     1500:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
     2000:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    95000:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
     1755:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  141:    {
     1255:  142:      state->deckCount[i] = 0;
     5020:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
     3765:  145:	  state->deck[i][j] = estate;
     3765:  146:	  state->deckCount[i]++;
        -:  147:	}
    10040:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
     8785:  150:	  state->deck[i][j] = copper;
     8785:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
     1755:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  157:    {
     1255:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
     1755:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
     1255:  168:      state->handCount[i] = 0;
     1255:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    14000:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
    13500:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
      500:  184:  state->outpostPlayed = 0;
      500:  185:  state->phase = 0;
      500:  186:  state->numActions = 1;
      500:  187:  state->numBuys = 1;
      500:  188:  state->playedCardCount = 0;
      500:  189:  state->whoseTurn = 0;
      500:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
     3000:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     2500:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
      500:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
      500:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 1255 returned 100% blocks executed 94%
     1255:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     1255:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     1255:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:    return -1;
     1255:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    15060:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    12550:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    12550:  218:    newDeck[newDeckPos] = state->deck[player][card];
    12550:  219:    newDeckPos++;
    40778:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
    28228:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
    12550:  223:    state->deckCount[player]--;
        -:  224:  }
    13805:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    12550:  226:    state->deck[player][i] = newDeck[i];
    12550:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
     1255:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 1000 returned 100% blocks executed 100%
     1000:  313:int numHandCards(struct gameState *state) {
     1000:  314:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 1500 returned 100% blocks executed 100%
     1500:  348:int whoseTurn(struct gameState *state) {
     1500:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 5000 returned 100% blocks executed 38%
     5000:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
     5000:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
     5000:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
     5000:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5000:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5000:  578:    state->deckCount[player]--;
     5000:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
     5000:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
function SmithyCard called 500 returned 100% blocks executed 100%
      500:  649:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  650:
        -:  651:  //+3 Cards
        -:  652:  int i;
     3000:  653:  for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  654:  {
     2500:  655:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  656:  }
        -:  657:   //discard card from hand
        -:  658:   //discardCard(handPos, currentPlayer, state, 0);
      500:  659:   return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:
        -:  662:}
        -:  663:
function AdventurerCard called 0 returned 0% blocks executed 0%
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:  while(drawntreasure<5){
branch  0 never executed
branch  1 never executed
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  668:          shuffle(currentPlayer, state);
call    0 never executed
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == gold || cardDrawn == silver || cardDrawn == copper)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  673:		drawntreasure++;
        -:  674:        else{
    #####:  675:          temphand[z]=cardDrawn;
    #####:  676:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:          z++;
        -:  678:        }
        -:  679:      }
    #####:  680:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:      }
        -:  684:
    #####:  685:  return 0;
        -:  686:// bug introduced: player is able to draw 5 treasure cards instead of 2. 
        -:  687:}
        -:  688:
        -:  689:
function VillageCard called 0 returned 0% blocks executed 0%
    #####:  690:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  691:
        -:  692:   //+1 Card
    #####:  693:   drawCard(currentPlayer, state);
call    0 never executed
    #####:  694:   drawCard(currentPlayer, state);  
call    0 never executed
    #####:  695:   drawCard(currentPlayer, state);
call    0 never executed
        -:  696:
        -:  697:   //+2 Actions
    #####:  698:   state->numActions = state->numActions + 10;
        -:  699:  
        -:  700:    //discard played card from hand
    #####:  701:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  702:
    #####:  703:  return 0; 
        -:  704:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1 
        -:  705:}
        -:  706:
function GreatHallCard called 0 returned 0% blocks executed 0%
    #####:  707:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  708:
        -:  709:      //+1 Card
    #####:  710:      drawCard(currentPlayer, state);
call    0 never executed
        -:  711:
        -:  712:      //+1 Actions
    #####:  713:      state->numActions++;
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:      
    #####:  718:      return 0;   
        -:  719:}
        -:  720:
function EmbargoCard called 0 returned 0% blocks executed 0%
    #####:  721:int EmbargoCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  722:
    #####:  723:	state->coins = state->coins + 20;
        -:  724:
        -:  725:      //see if selected pile is in play
    #####:  726:       if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  727:          {
    #####:  728:             return -1;
        -:  729:          }
        -:  730:    
        -:  731:       //add embargo token to selected supply pile
    #####:  732:       state->embargoTokens[choice1]++;
    #####:  733:       state->embargoTokens[choice1]++;  
        -:  734:
        -:  735:      //trash card
    #####:  736:       discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -:  737:
    #####:  738:	return 0; 
        -:  739://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  740:}
        -:  741:
function cardEffect called 500 returned 100% blocks executed 3%
      500:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
      500:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      500:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
      500:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
      500:  754:  int drawntreasure=0;
        -:  755:  int cardDrawn;
      500:  756:  int z = 0;// this is the counter for the temp hand
      500:  757:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
      500:  763:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        -:  766:     
        -:  767:	//call function 
    #####:  768:	AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
call    0 never executed
        -:  769:
    #####:  770:	return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
call    0 never executed
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  809:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
      500:  914:      	SmithyCard(currentPlayer, state, handPos);
call    0 returned 100%
      500:  915:	return 0;
        -:  916:		
        -:  917:    case village:
        -:  918:      
    #####:  919:	VillageCard(currentPlayer, state, handPos);
call    0 never executed
        -:  920:
    #####:  921:	return 0;
        -:  922:		
        -:  923:    case baron:
    #####:  924:      state->numBuys++;//Increase buys by 1!
    #####:  925:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  926:	int p = 0;//Iterator for hand!
    #####:  927:	int card_not_discarded = 1;//Flag for discard set!
    #####:  928:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  929:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  931:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  932:	    state->discardCount[currentPlayer]++;
    #####:  933:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  934:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  935:	    }
    #####:  936:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  937:	    state->handCount[currentPlayer]--;
    #####:  938:	    card_not_discarded = 0;//Exit the loop
        -:  939:	  }
    #####:  940:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  941:	    if(DEBUG) {
        -:  942:	      printf("No estate cards in your hand, invalid choice\n");
        -:  943:	      printf("Must gain an estate if there are any\n");
        -:  944:	    }
    #####:  945:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  947:	      state->supplyCount[estate]--;//Decrement estates
    #####:  948:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:		isGameOver(state);
call    0 never executed
        -:  950:	      }
        -:  951:	    }
    #####:  952:	    card_not_discarded = 0;//Exit the loop
        -:  953:	  }
        -:  954:			    
        -:  955:	  else{
    #####:  956:	    p++;//Next card
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:			    
        -:  961:      else{
    #####:  962:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  964:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  965:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:	    isGameOver(state);
call    0 never executed
        -:  967:	  }
        -:  968:	}
        -:  969:      }
        -:  970:	    
        -:  971:      
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case great_hall:
        -:  975:      
    #####:  976:	GreatHallCard(currentPlayer, state, handPos);
call    0 never executed
        -:  977:
    #####:  978:	return 0;
        -:  979:		
        -:  980:    case minion:
        -:  981:      //+1 action
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  986:			
    #####:  987:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  state->coins = state->coins + 2;
        -:  990:	}
        -:  991:			
    #####:  992:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  993:	{
        -:  994:	  //discard hand
    #####:  995:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:	    {
    #####:  997:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  998:	    }
        -:  999:				
        -: 1000:	  //draw 4
    #####: 1001:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1004:	    }
        -: 1005:				
        -: 1006:	  //other players discard hand and redraw if hand size > 4
    #####: 1007:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1012:		    {
        -: 1013:		      //discard hand
    #####: 1014:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1015:			{
    #####: 1016:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1017:			}
        -: 1018:							
        -: 1019:		      //draw 4
    #####: 1020:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1021:			{
    #####: 1022:			  drawCard(i, state);
call    0 never executed
        -: 1023:			}
        -: 1024:		    }
        -: 1025:		}
        -: 1026:	    }
        -: 1027:				
        -: 1028:	}
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case steward:
    #####: 1032:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //+2 cards
    #####: 1035:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1036:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1037:	}
    #####: 1038:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 coins
    #####: 1041:	  state->coins = state->coins + 2;
        -: 1042:	}
        -: 1043:      else
        -: 1044:	{
        -: 1045:	  //trash 2 cards in hand
    #####: 1046:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1047:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1048:	}
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case tribute:
    #####: 1055:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1056:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1057:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	  state->deckCount[nextPlayer]--;
        -: 1059:	}
    #####: 1060:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1062:	  state->discardCount[nextPlayer]--;
        -: 1063:	}
        -: 1064:	else{
        -: 1065:	  //No Card to Reveal
        -: 1066:	  if (DEBUG){
        -: 1067:	    printf("No cards to reveal\n");
        -: 1068:	  }
        -: 1069:	}
        -: 1070:      }
        -: 1071:	    
        -: 1072:      else{
    #####: 1073:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1074:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1075:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1076:	    state->deckCount[nextPlayer]++;
    #####: 1077:	    state->discard[nextPlayer][i] = -1;
    #####: 1078:	    state->discardCount[nextPlayer]--;
        -: 1079:	  }
        -: 1080:			    
    #####: 1081:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1082:	} 
    #####: 1083:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
    #####: 1086:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
        -: 1089:      }    
        -: 1090:		       
    #####: 1091:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1092:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1093:	state->playedCardCount++;
    #####: 1094:	tributeRevealedCards[1] = -1;
        -: 1095:      }
        -: 1096:
    #####: 1097:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1098:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1099:	  state->coins += 2;
        -: 1100:	}
        -: 1101:		    
    #####: 1102:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1103:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1104:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1105:	}
        -: 1106:	else{//Action Card
    #####: 1107:	  state->numActions = state->numActions + 2;
        -: 1108:	}
        -: 1109:      }
        -: 1110:	    
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case ambassador:
    #####: 1114:      j = 0;		//used to check if player has enough cards to discard
        -: 1115:
    #####: 1116:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
        -: 1119:	}
        -: 1120:
    #####: 1121:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;
        -: 1124:	}
        -: 1125:
    #####: 1126:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
    #####: 1128:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1129:	    {
    #####: 1130:	      j++;
        -: 1131:	    }
        -: 1132:	}
    #####: 1133:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;				
        -: 1136:	}
        -: 1137:
        -: 1138:      if (DEBUG) 
        -: 1139:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1140:
        -: 1141:      //increase supply count for choosen card by amount being discarded
    #####: 1142:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1143:			
        -: 1144:      //each other player gains a copy of revealed card
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1150:	    }
        -: 1151:	}
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1155:
        -: 1156:      //trash copies of cards returned to supply
    #####: 1157:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:	{
    #####: 1159:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1164:		  break;
        -: 1165:		}
        -: 1166:	    }
        -: 1167:	}			
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case cutpurse:
        -: 1172:
    #####: 1173:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1174:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1179:		{
    #####: 1180:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1183:		      break;
        -: 1184:		    }
    #####: 1185:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1186:		    {
    #####: 1187:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1188:			{
        -: 1189:			  if (DEBUG)
        -: 1190:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1191:			}	
    #####: 1192:		      break;
        -: 1193:		    }		
        -: 1194:		}
        -: 1195:					
        -: 1196:	    }
        -: 1197:				
        -: 1198:	}				
        -: 1199:
        -: 1200:      //discard played card from hand
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1202:
    #####: 1203:      return 0;
        -: 1204:
        -: 1205:		
        -: 1206:    case embargo: 
        -: 1207:      
    #####: 1208:	EmbargoCard(currentPlayer, handPos, state, choice1); 
call    0 never executed
    #####: 1209:	return 0;
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1229:	}
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1237:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1241:	}
        -: 1242:      }
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
        -: 1254:	    }
        -: 1255:	}
    #####: 1256:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1266:	    }
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
        -: 1277:}
        -: 1278:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
function updateCoins called 500 returned 100% blocks executed 82%
      500: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
      500: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
     3000: 1362:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1363:    {
     2500: 1364:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1365:	{
     1779: 1366:	  state->coins += 1;
        -: 1367:	}
      721: 1368:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
      721: 1372:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
      500: 1379:  state->coins += bonus;
        -: 1380:
      500: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
