        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include "assert.h"
        -:    6:#include "dominion.h"
        -:    7:#include "rngs.h"
        -:    8:#include <time.h>
        -:    9:
        -:   10://testing getCost function in dominion.c
        -:   11:
function main called 1 returned 100% blocks executed 85%
        1:   12:int main(int argc, char** argv){
        -:   13:
        1:   14:printf("/*********************** Testing GetCost() **************************/\n");
call    0 returned 100%
        -:   15:
        -:   16://initialize variables, create a new game state, and call initializeGame()
        -:   17:
        -:   18:struct gameState game;
        -:   19:
        -:   20://check function as a whole to ensure that it is returning -1 if no card name (or incorrect card name) is passed in, as it should
        1:   21:if(getCost(45) != -1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   22:	printf("GETCOST TEST FAILED.\n");
call    0 never executed
        -:   23:}
        -:   24:
        -:   25:// assert for each value of cards that getCost function returns proper amount
        1:   26:int cards[27] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};
        1:   27:int values[27] = {0, 2, 5, 8, 0, 3, 6, 6, 5, 4, 4, 5, 4, 4, 3, 4, 3, 5, 3, 5, 3, 4, 2, 5, 4, 4, 4};
        -:   28:
        1:   29:int x = 0;
        -:   30:
        -:   31://loop through all 27 cards and call assert statement on each
       28:   32:for(x = 0; x < 27; x++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   33:	if(getCost(cards[x]) != values[x]){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   34:		printf("GETCOST TEST FAILED\n");
call    0 never executed
        -:   35:	}
        -:   36:}
        -:   37:
        1:   38:printf("GETCOST TEST PASSED\n");
call    0 returned 100%
        -:   39:
        1:   40:return 0;
        -:   41:
        -:   42:}
