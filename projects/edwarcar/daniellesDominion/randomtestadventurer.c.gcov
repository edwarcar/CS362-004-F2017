        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:#define MAX_TESTS 10000 
        -:    9:
function main called 1 returned 100% blocks executed 82%
        1:   10:int main() {
        1:   11:printf("/*********************** Testing Adventurer Card **************************/\n");
call    0 returned 100%
        -:   12:
        -:   13:    //initialize variables
        1:   14:    int k[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        -:   15:    int players;
        -:   16:    int player;
        -:   17:    int handCount;
        -:   18:    int deckCount;
        -:   19:    int seed;
        -:   20:    int handPosition;
        -:   21:    int bonus;
        -:   22:    struct gameState game;
        -:   23:    int test_state; 
        1:   24:    int test_failed = 0; 
        -:   25:    int handCountAfter;
        -:   26:    int deckCountAfter; 	
        1:   27:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:    // set up loop to run MAX_TESTS number of random tests
    10001:   30:    for (int i = 0; i < MAX_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:
        -:   32:	//initialize variables
    10000:   33:        players = rand() % (MAX_PLAYERS - 2) + 2;
call    0 returned 100%
    10000:   34:        seed = rand();
call    0 returned 100%
    10000:   35:        bonus = 0;
    10000:   36:        handPosition = rand() % 4;
call    0 returned 100%
    10000:   37:        player = i % (players);
    10000:   38:        test_state = 1; 
        -:   39:
        -:   40:	// initialize game
    10000:   41:        initializeGame(players, k, seed, &game); 
call    0 returned 100%
        -:   42:
        -:   43:        //randomly initialize variables 
    10000:   44:        game.deckCount[player] = rand() % MAX_DECK;   //Pick random deck size out of MAX DECK size
call    0 returned 100%
    10000:   45:        game.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
    10000:   46:        game.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        -:   47:        
        -:   48:        // get hand count and deck count before using card 
    10000:   49:        handCount = numHandCards(&game);
call    0 returned 100%
    10000:   50:        deckCount = game.deckCount[player];
        -:   51:        
        -:   52:	//check if cardEffect ran properly
    10000:   53: 	if( cardEffect(adventurer, 1, 1, 1, &game, handPosition, bonus) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   54:
        -:   55:		//get hand count and deck count after using card
    10000:   56:		handCountAfter = numHandCards(&game); 
call    0 returned 100%
    10000:   57:		deckCountAfter = game.deckCount[player];
        -:   58: 
        -:   59:		//compare hand count and deck count after using card to see if the the card is working properly
    10000:   60:        	if (handCountAfter != (handCount + 2)) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       21:   61:            		printf("Error: handCount should increase by 2 after drawing an adventurer card\n");
call    0 returned 100%
       21:   62:            		printf("Hand count before: %d. Hand count after: %d\n", handCount, handCountAfter); 
call    0 returned 100%
       21:   63:			test_state = 0; //set test state to failed
       21:   64:	    		test_failed++; 	
        -:   65:        	}
    10000:   66:		if (deckCountAfter > deckCount && deckCount != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   67:	    		printf("Error: deck count should have decreased!\n"); 
call    0 never executed
    #####:   68:	   		printf("Deck count  before: %d. Deck count after: %d\n", deckCount, deckCountAfter);
call    0 never executed
    #####:   69:			test_failed++; 
    #####:   70:			test_state = 0; //set test state to failed
        -:   71: 		}
    10000:   72:    		  printf("Hand count before: %d. Hand count after: %d\n", handCount, handCountAfter);
call    0 returned 100%
    10000:   73:		  printf("Deck count before: %d. Deck count after: %d\n", deckCount, deckCountAfter);
call    0 returned 100%
        -:   74:	}
        -:   75:	//if cardEffect didn't work, print error
        -:   76:	else {
    #####:   77:		printf(" Error: card could not be played\n");
call    0 never executed
    #####:   78:		test_state = 0; //set test state to failed
        -:   79:	}
        -:   80:
        -:   81:
    10000:   82:        if(test_state == 1){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9979:   83:    		printf("Iteration %d: test passed\n" , i); 
call    0 returned 100%
        -:   84:    	}
        -:   85:	else{
       21:   86:		printf("Iteration %d: test failed\n" , i); 
call    0 returned 100%
        -:   87:	}
        -:   88:     }
        -:   89:
        1:   90:    if(test_failed > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   91:	printf("Adventurer card failed %d random tests\n", test_failed);
call    0 returned 100%
        -:   92:    }		
        -:   93:    else {
    #####:   94:        printf("Adventurer card passed all tests\n");  
call    0 never executed
        -:   95:    }	
        1:   96:    return 0;
        -:   97:}
